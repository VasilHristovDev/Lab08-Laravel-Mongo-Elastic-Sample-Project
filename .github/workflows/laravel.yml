name: Laravel

on:
  push:
    branches: ['main', '*/*']
  pull_request:
    branches: ['**']


jobs:
  CacheComposer:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mysql, mongodb
      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
      - uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
      - name: Install Composer dependencies
        run: composer install --no-ansi --no-interaction
             --no-scripts --no-progress --prefer-dist
  ValidateYaml:
    runs-on: ubuntu-latest
    needs: [CacheComposer, GitLeaks]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Validate YAML files
        run: yamllint .
  CliMarkdown:
    runs-on: ubuntu-latest
    needs: [CacheComposer, GitLeaks]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Install Cli-markdown
        run: npm install -g markdownlint-cli
      - name: Run cli-markdown
        run: markdownlint '**/*.md' --ignore vendor
  EditorConfig:
    name: Check .editorconfig file
    runs-on: ubuntu-latest
    needs: [CacheComposer, GitLeaks]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Install editorconfig-checker
        run: npm install editorconfig-checker -g
      - name: run editorconfig-checker to code
        run: editorconfig-checker --exclude vendor --exclude .idea
  GitLeaks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  PhpStan:
    runs-on: ubuntu-latest
    needs: [CacheComposer, GitLeaks]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mysql, mongodb
      - name: Composer Install
        run: composer install --no-ansi --no-interaction
             --no-scripts --no-progress --prefer-dist
      - name: PHP Stan
        uses: php-actions/phpstan@v3
        with:
          configuration: phpstan.neon
  PhpCSFixer:
    runs-on: ubuntu-latest
    needs: [CacheComposer, GitLeaks]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mysql, mongodb
      - name: Composer Install
        run: composer install --no-ansi --no-interaction
             --no-scripts --no-progress --prefer-dist
      - name: PHP CS Fixer
        run: |
          ./vendor/bin/php-cs-fixer fix --dry-run --diff ./app
  Migrate:
    runs-on: ubuntu-latest
    needs: [PhpCSFixer, PhpStan]
    services:
      mysql-service:
        image: mysql:8
        env:
          MYSQL_DATABASE: parking
          MYSQL_USER: admin
          MYSQL_ROOT_PASSWORD: password
          MYSQL_PASSWORD: password
        ports:
          - 3306/tcp
        options: --health-cmd="mysqladmin ping" --health-interval=10s
                 --health-timeout=5s --health-retries=3
      mongodb-service:
        image: mongo
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: password
          MONGO_INITDB_DATABASE: parking
          options: >-
            --health-cmd mongo
            --health-interval 10s
            --health-timeout 5s
            --health-retries 5
        ports:
          - 27017:27017
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mysql, mongodb
      - name: Install Composer dependencies
        run: composer install --no-ansi --no-interaction
             --no-scripts --no-progress --prefer-dist
      - name: Configure Laravel
        run: |
           cp .env.ci .env
           php artisan key:generate
           php artisan config:clear
      - name: Run migrations
        run: php artisan migrate
        env:
          DB_PORT: ${{ job.services.mysql-service.ports[3306]}}
          DB_HOST: 127.0.0.1
  Tests:
    runs-on: ubuntu-latest
    needs: [PhpCSFixer, PhpStan]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mysql, mongodb
      - name: Install Composer dependencies
        run: composer install --no-ansi --no-interaction
             --no-scripts --no-progress --prefer-dist
      - name: Configure Laravel
        run: |
            cp .env.ci .env
            php artisan key:generate
            php artisan config:clear
      - name: Run tests
        run: php artisan test
        env:
          DB_PORT: ${{ job.services.mysql-service.ports[3306]}}
  SnykTests:
    runs-on: ubuntu-latest
    needs: [Tests, Migrate]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      # Snyk Static analysis step
      - name: Snyk Code Analysis
        run: |
          npm install -g snyk
          snyk auth ${{ secrets.SNYK_API_TOKEN }}
          snyk test
  SonarCloud:
    runs-on: ubuntu-latest
    needs: [Tests, Migrate]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Analyze with SonarCloud
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONARCLOUD_TOKEN }}
  DockerBuild:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4 # More information on this action can be found below in the 'AWS Credentials' section
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker Image
        working-directory: ${{ github.workspace }}/laravel-image
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: mdp-laravel-images
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/mdp-laravel-images:${{ github.sha }} .

#      - name: Run Trivy vulnerability scanner
#        uses: aquasecurity/trivy-action@master
#        with:
#          image-ref: '${{secrets.ECR_REGISTRY}}/mdp_laravel:${{ github.sha }}'
#          format: 'table'
#          exit-code: '1'
#          ignore-unfixed: true
#          vuln-type: 'os,library'
#          severity: 'CRITICAL,HIGH'

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: mdp-laravel-images
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
